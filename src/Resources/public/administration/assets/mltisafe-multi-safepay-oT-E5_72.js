const l=`<template v-if="isRefundAllowed"> <mt-card title="Refund" :isLoading="isLoading" class="sw-order-detail-base__line-item-grid-card"> <mt-number-field label="Amount" name="sw-field--amount" v-model="amount" placeholder="0.00" number-type="float" :step="0.01" :max="maxRefundableAmount" :disabled="isRefundDisabled"> </mt-number-field> <mt-button variant="primary" @click="showRefundModal()" :disabled="isRefundDisabled">Refund</mt-button> <span class="float-right"> <strong>Amount refunded: {{ order ? order.currency.symbol : 'currency' }}&nbsp;{{ refundedAmount }}</strong> </span> <sw-modal v-show="showModal" title="MultiSafepay refund" variant="small" @modal-close="closeModal()"> <template #default> Are you sure you want to refund {{ order ? order.currency.symbol : 'currency' }}{{ this.amount }}? <br/> </template> <template #modal-footer> <mt-button @click="closeModal()" size="small"> {{ $t('global.default.cancel') }} </mt-button> <mt-button @click="applyRefund()" size="small" variant="primary"> {{ $t('global.default.apply') }} </mt-button> </template> </sw-modal> </mt-card> </template>`,{Component:u,Mixin:p}=Shopware,{Criteria:c}=Shopware.Data;u.register("multisafepay-refund",{template:l,inject:["repositoryFactory","orderService","stateStyleDataProviderService","multiSafepayApiService"],mixins:[p.getByName("notification")],props:{orderId:{type:String,required:!0}},data(){return{amount:null,isLoading:null,versionContext:null,order:null,maxRefundableAmount:0,isRefundAllowed:!0,refundedAmount:0,showModal:!1,isRefundDisabled:!1}},watch:{orderId(){this.createdComponent()},amount(){this.amount=parseFloat(this.amount).toFixed(2)},refundedAmount(){this.refundedAmount=parseFloat(this.refundedAmount).toFixed(2)}},methods:{closeModal(){this.showModal=!1},showRefundModal(){if(this.amount<.01){this.createNotificationWarning({title:"Invalid amount",message:"Fill in a valid amount"});return}this.showModal=!0},applyRefund(){this.isLoading||(this.isLoading=!0,this.closeModal(),this.multiSafepayApiService.refund(this.amount,this.orderId).then(t=>{if(t.status===!1){this.createNotificationError({title:"Failed to refund",message:t.message});return}this.createNotificationSuccess({title:"Success",message:"Successfully refunded"}),this.reloadEntityData()}).catch(t=>{this.createNotificationError({title:"Error",message:t.message||"An unexpected error occurred during refund"})}).finally(()=>{this.isLoading=!1}))},createdComponent(){this.versionContext=Shopware.Context.api,this.reloadEntityData()},reloadEntityData(){return this.isLoading=!0,this.orderRepository.get(this.orderId,this.versionContext,this.orderCriteria).then(t=>(this.order=t,this.multiSafepayApiService.getRefundData(this.order.id).then(e=>{this.isRefundAllowed=e.isAllowed,this.refundedAmount=e.refundedAmount,this.maxRefundableAmount=this.order.amountTotal-this.refundedAmount,this.isRefundDisabled=this.order.amountTotal-this.refundedAmount===0,this.isLoading=!1}).catch(()=>{this.isRefundAllowed=!1}),Promise.resolve())).catch(()=>Promise.reject())}},computed:{orderRepository(){return this.repositoryFactory.create("order")},orderCriteria(){const t=new c(this.page,this.limit);return t.addAssociation("currency"),t}},created(){this.createdComponent()}});const d=`<div> <sw-button-process :isLoading="isLoading" @click="check"> {{ $t('multisafepay-verify-api-key.apiButton') }} </sw-button-process> </div>`,{Component:m,Mixin:h}=Shopware;m.register("multisafepay-verify-api-key",{template:d,inject:["multiSafepayApiService"],mixins:[h.getByName("notification")],data(){return{isLoading:!1,maxAttempts:10}},computed:{globalPluginConfig(){let t,e=this.$parent;for(let a=0;a<this.maxAttempts;a++){if(e&&e.actualConfigData)return t=e.actualConfigData.null,t;e=e.$parent}return null},actualPluginConfig(){let t,e,a=this.$parent;for(let n=0;n<this.maxAttempts;n++){if(a&&a.currentSalesChannelId)t=a.currentSalesChannelId;else return null;if(a&&a.actualConfigData&&a.actualConfigData[t])return e=a.actualConfigData[t],e;a=a.$parent}return null}},methods:{check(){this.isLoading=!0,this.multiSafepayApiService.verifyApiKey(this.globalPluginConfig,this.actualPluginConfig).then(t=>{if(t.success===!1){this.createNotificationWarning({title:"MultiSafepay",message:this.$t("multisafepay-verify-api-key.error")}),this.isLoading=!1;return}this.createNotificationSuccess({title:"MultiSafepay",message:this.$t("multisafepay-verify-api-key.success")}),this.isLoading=!1})}}});const f=`<template> <div class="multisafepay-support"> <mt-container> <h2 class="multisafepay-title">{{ $t("msp-support.documentation") }}</h2> <p>{{ $t("msp-support.read_docs") }}:</p> <ul class="multisafepay-ul"> <li> <a href="https://docs.multisafepay.com/docs/shopware#shopware-6" target="_blank" rel="noopener"> {{ $t('msp-support.manual') }} </a> </li> <li> <a href="https://github.com/MultiSafepay/shopware6/blob/master/CHANGELOG.md" target="_blank" rel="noopener"> {{ $t("msp-support.changelog") }} </a> </li> </ul> <p class="mt-1">{{ $t("msp-support.for_developers") }}:</p> <ul class="multisafepay-ul"> <li> <a href="https://docs.multisafepay.com/reference/introduction" target="_blank" rel="noopener"> {{ $t("msp-support.api_documentation") }} </a> </li> <li> <a href="https://github.com/MultiSafepay/Shopware6" target="_blank" rel="noopener"> MultiSafepay GitHub </a> </li> </ul> <h2 class="mt-2">{{ $t("msp-support.account")}}</h2> <p> {{ $t("msp-support.multisafepay_account_needed") }} <br/> <span v-html='$t("msp-support.multisafepay_test_account")'></span> </p> <p class="mt-2"> <span v-html='$t("msp-support.multisafepay_live_account")'></span> </p> <ul class="multisafepay-ul-none"> <li> {{ $t("msp-support.telephone") }}: <a href="tel:+31208500501"> +31 (0)20 - 8500501 </a> </li> <li> {{ $t("msp-support.e-mail") }}: <a href="mailto:sales@multisafepay.com"> sales@multisafepay.com </a> </li> </ul> <h2 class="mt-2">{{ $t("msp-support.contact") }}</h2> <p> {{ $t("msp-support.multisafepay_assistance_integration_team") }} </p> <ul class="multisafepay-ul-none"> <li> {{ $t("msp-support.telephone") }}: <a href="tel:+31208500500"> +31 (0)20 - 8500500 </a> </li> <li> {{ $t("msp-support.e-mail") }}: <a href="mailto:integration@multisafepay.com"> integration@multisafepay.com </a> </li> </ul> </mt-container> </div> </template>`,{Component:y}=Shopware;y.register("multisafepay-support",{template:f,data(){return{}},created(){},mounted(){const t=this.$el.closest("template.sw-form-field-renderer");t&&(t.style.display="block");let e=this.$el;for(;e;)window.getComputedStyle(e).display==="none"&&(e.style.display="block"),e=e.parentElement}});const g=`{% block sw_settings_payment_detail_content_field_after_order_enabled %} {% parent %} <mt-switch v-if="tokenizationSupported" v-model="paymentMethod.customFields.tokenization" name="sw-field--paymentMethod-customFields.tokenization" class="sw-settings-payment-detail__field-custom-fields-tokenization" label="Tokenization" :help-text="$t('multisafepay-tokenization.help_text')" ></mt-switch> <mt-switch v-if="componentSupported" v-model="paymentMethod.customFields.component" name="sw-field--paymentMethod-customFields.component" class="sw-settings-payment-detail__field-custom-fields-component" label="Component" :help-text="$t('multisafepay-component.help_text')" ></mt-switch> <mt-switch v-if="paymentMethod.name.toLowerCase().includes('mybank')" v-model="paymentMethod.customFields.direct" name="sw-field--paymentMethod-customFields.direct" class="sw-settings-payment-detail__field-custom-fields-direct" label="Pay inside checkout" :help-text="$t('multisafepay-direct.help_text')" ></mt-switch> {% endblock %}`,{Component:_}=Shopware;_.override("sw-settings-payment-detail",{template:g,data(){return{tokenizationSupported:!1,componentSupported:!1}},inject:["multiSafepayApiService"],watch:{paymentMethod(){this.paymentMethod||(this.paymentMethod={}),this.paymentMethod.id||(this.paymentMethod.id=null),this.paymentMethod.customFields||(this.paymentMethod.customFields={}),this.paymentMethod.customFields.tokenization||(this.paymentMethod.customFields.tokenization=!1),this.paymentMethod.customFields.component||(this.paymentMethod.customFields.component=!1),this.paymentMethod.customFields.direct||(this.paymentMethod.customFields.direct=!1),this.reloadEntityData()}},mounted(){this.reloadEntityData()},methods:{reloadEntityData(){this.multiSafepayApiService.isTokenizationAllowed(this.$route.params.id).then(t=>{this.tokenizationSupported=t.supported}),this.multiSafepayApiService.isComponentAllowed(this.$route.params.id).then(t=>{this.componentSupported=t.supported})}}});const k='{% block sw_order_detail_general_line_items_card %} {% parent %} <multisafepay-refund :orderId="orderId"></multisafepay-refund> {% endblock %}';Shopware.Component.override("sw-order-detail-general",{template:k});const S='{% block sw_order_detail_base_line_items_card %} {% parent %} <multisafepay-refund :orderId="orderId"></multisafepay-refund> {% endblock %}';Shopware.Component.override("sw-order-detail-base",{template:S});const i=Shopware.Classes.ApiService;class v extends i{constructor(e,a,n="multisafepay"){super(e,a,n)}refund(e,a){const n=`${this.getApiBasePath()}/refund`;return this.httpClient.post(n,{amount:e*100,orderId:a},{headers:this.getBasicHeaders()}).then(o=>i.handleResponse(o)).catch(o=>i.handleResponse(o))}getRefundData(e){const a=`${this.getApiBasePath()}/get-refund-data`;return this.httpClient.post(a,{orderId:e},{headers:this.getBasicHeaders()}).then(n=>i.handleResponse(n))}verifyApiKey(e,a){const n=`${this.getApiBasePath()}/verify-api-key`,o=this.getBasicHeaders();return this.httpClient.post(n,{globalPluginConfig:e,actualPluginConfig:a},{headers:o}).then(r=>i.handleResponse(r))}isTokenizationAllowed(e){const a=`${this.getApiBasePath()}/tokenization-allowed`;return this.httpClient.post(a,{paymentMethodId:e},{headers:this.getBasicHeaders()}).then(n=>i.handleResponse(n)).catch(n=>i.handleResponse(n))}isComponentAllowed(e){const a=`${this.getApiBasePath()}/component-allowed`;return this.httpClient.post(a,{paymentMethodId:e},{headers:this.getBasicHeaders()}).then(n=>i.handleResponse(n)).catch(n=>i.handleResponse(n))}}const b={"multisafepay-verify-api-key":{success:"Die Verbindung wurde erfolgreich hergestellt",error:"Verbindung konnte nicht hergestellt werden. Bitte überprüfen Sie Ihre API-Anmeldeinformationen",apiButton:"API Verbindung testen"},"msp-support":{documentation:"Dokumentation",api_documentation:"API Dokumentation",read_docs:"Lesen Sie in unserem Dokumentationen mehr über MultiSafepay und wie Sie mit uns starten können",manual:"Anleitung",changelog:"Änderungsprotokoll",faq:"FAQ",for_developers:"Für Entwickler",account:"Account","e-mail":"E-Mail",telephone:"Telefon",contact:"Kontakt",multisafepay_account_needed:"Um dieses Plugin nutzen zu können benötigen Sie einen MultiSafepay-Account.",multisafepay_test_account:'Wenn Sie einen genauen Überblick über die Services von MultiSafepay bekommen möchten, können Sie einfach einen <a href="https://testmerchant.multisafepay.com/signup" target="_blank" rel="noopener">Test-Account</a> eröffnen.',multisafepay_assistance_integration_team:"Sie brauchen Hilfe? Kontaktieren Sie unser Integrations-Team:",multisafepay_live_account:'Wenn Sie einen Account eröffnen wollen, können Sie einfach einen <a href="https://merchant.multisafepay.com/signup" target="_blank" rel="noopener">Live-Account</a> eröffnen oder kontaktieren Sie das MultiSafepay Sales-Department:'},"multisafepay-tokenization":{help_text:"Weitere Informationen zur Tokenisierung finden Sie in unserem Dokumentationscenter: https://docs.multisafepay.com/docs/recurring-payments"},"multisafepay-component":{help_text:"Sehen Sie sich unser Dokumentationscenter an, um mehr über die Zahlungskomponente zu erfahren: https://docs.multisafepay.com/docs/payment-components"},"multisafepay-direct":{help_text:"Die Zahlung auf der Checkout-Seite aktivieren."}},w={"multisafepay-verify-api-key":{success:"Connection was successfully established",error:"Connection could not be established. Please check your API credentials",apiButton:"Validate API credentials"},"msp-support":{documentation:"Documentation",api_documentation:"API Documentation",read_docs:"Read our documentation for more information about MultiSafepay and how to get started",manual:"Manual",changelog:"Changelog",faq:"FAQ",for_developers:"For developers",account:"Account","e-mail":"E-mail",telephone:"Telephone",contact:"Contact",multisafepay_account_needed:"To use this plugin you need a MultiSafepay account.",multisafepay_test_account:'If you would like to have a clear overview of what MultiSafepay has to offer, feel free to create a <a href="https://testmerchant.multisafepay.com/signup" target="_blank" rel="noopener">test account</a>.',multisafepay_assistance_integration_team:"Need assistance? Feel free to contact our integration team:",multisafepay_live_account:'If you would like to set up a live account, feel free to create a <a href="https://merchant.multisafepay.com/signup" target="_blank" rel="noopener">live account</a> or contact the MultiSafepay Sales department:'},"multisafepay-tokenization":{help_text:"Check out our documentation center to found more about tokenization at https://docs.multisafepay.com/docs/recurring-payments"},"multisafepay-component":{help_text:"Check out our documentation center to found more about Payment Component at https://docs.multisafepay.com/docs/payment-components"},"multisafepay-direct":{help_text:"Enable the payment inside the checkout page"}},A={"multisafepay-verify-api-key":{success:"De verbinding is succesvol tot stand gekomen",error:"De verbinding is niet tot stand gekomen. Controleer uw API gegevens",apiButton:"Controleer API gegevens"},"msp-support":{documentation:"Documentatie",api_documentation:"API documentatie",read_docs:"Lees onze documentatie voor meer informatie over MultiSafepay en hoe u aan de slag kunt gaan",manual:"Handleiding",changelog:"Changelog",faq:"FAQ",for_developers:"Voor Ontwikkelaars",account:"Account","e-mail":"E-mail",telephone:"Telefoon",contact:"Contact",multisafepay_account_needed:"Om deze plugin te gebruiken heeft u een MultiSafepay-account nodig.",multisafepay_test_account:'Wilt u een duidelijk overzicht van wat MultiSafepay te bieden heeft, maak dan gerust een <a href="https://testmerchant.multisafepay.com/signup" target="_blank" rel="noopener">testaccount</a> aan.',multisafepay_assistance_integration_team:"Assistentie nodig? Neem gerust contact op met ons integratie team:",multisafepay_live_account:'Wilt u een live account aanmaken, maak dan gerust een <a href="https://merchant.multisafepay.com/signup" target="_blank" rel="noopener">live account</a> aan of neem contact op met de MultiSafepay Sales afdeling:'},"multisafepay-tokenization":{help_text:"Bekijk ons documentatiecentrum voor meer informatie over tokenization: https://docs.multisafepay.com/docs/recurring-payments"},"multisafepay-component":{help_text:"Bekijk ons documentatiecentrum voor meer informatie over Payment Component: https://docs.multisafepay.com/docs/payment-components"},"multisafepay-direct":{help_text:"Activeer de betaling binnen de afrekenpagina."}},{Application:s}=Shopware;s.addServiceProvider("multiSafepayApiService",t=>{const e=s.getContainer("init");return new v(e.httpClient,t.loginService)});Shopware.Locale.extend("de-DE",b);Shopware.Locale.extend("en-GB",w);Shopware.Locale.extend("nl-NL",A);
//# sourceMappingURL=mltisafe-multi-safepay-oT-E5_72.js.map

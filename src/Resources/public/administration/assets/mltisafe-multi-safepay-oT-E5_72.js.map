{"version":3,"file":"mltisafe-multi-safepay-oT-E5_72.js","sources":["../../../app/administration/src/components/multisafepay-refund/multisafepay-refund.html.twig","../../../app/administration/src/components/multisafepay-refund/index.js","../../../app/administration/src/components/multisafepay-verify-api-key/multisafepay-verify-api-key.html.twig","../../../app/administration/src/components/multisafepay-verify-api-key/index.js","../../../app/administration/src/components/multisafepay-support/multisafepay-support.html.twig","../../../app/administration/src/components/multisafepay-support/index.js","../../../app/administration/src/paymentMethodSettings/sw-settings-payment-detail.html.twig","../../../app/administration/src/paymentMethodSettings/index.js","../../../app/administration/src/override/sw-order-detail-general/sw-order-detail-general.html.twig","../../../app/administration/src/override/sw-order-detail-general/index.js","../../../app/administration/src/override/sw-order-detail/sw-order-detail.html.twig","../../../app/administration/src/override/sw-order-detail/index.js","../../../app/administration/src/service/MultiSafepayApi.service.js","../../../app/administration/src/main.js"],"sourcesContent":["<template v-if=\"isRefundAllowed\">\n    <mt-card title=\"Refund\"\n             :isLoading=\"isLoading\"\n             class=\"sw-order-detail-base__line-item-grid-card\">\n        <mt-number-field\n            label=\"Amount\"\n            name=\"sw-field--amount\"\n            v-model=\"amount\"\n            placeholder=\"0.00\"\n            number-type=\"float\"\n            :step=\"0.01\"\n            :max=\"maxRefundableAmount\"\n            :disabled=\"isRefundDisabled\">\n        </mt-number-field>\n        <mt-button variant=\"primary\" @click=\"showRefundModal()\" :disabled=\"isRefundDisabled\">Refund</mt-button>\n        <span class=\"float-right\">\n            <strong>Amount refunded: {{ order ? order.currency.symbol : 'currency' }}&nbsp;{{ refundedAmount }}</strong>\n        </span>\n        <sw-modal v-show=\"showModal\" title=\"MultiSafepay refund\" variant=\"small\" @modal-close=\"closeModal()\">\n            <template #default>\n                Are you sure you want to refund {{ order ? order.currency.symbol : 'currency' }}{{ this.amount }}?\n                <br/>\n            </template>\n            <template #modal-footer>\n                <mt-button @click=\"closeModal()\" size=\"small\">\n                    {{ $t('global.default.cancel') }}\n                </mt-button>\n                <mt-button @click=\"applyRefund()\"\n                           size=\"small\"\n                           variant=\"primary\">\n                    {{ $t('global.default.apply') }}\n                </mt-button>\n            </template>\n        </sw-modal>\n    </mt-card>\n</template>\n","// Import the SCSS file for this component\nimport './multisafepay-refund.scss';\n\n// Import the Twig template for this component\nimport template from './multisafepay-refund.html.twig';\n\n// Import the necessary objects from Shopware\nconst {Component, Mixin} = Shopware;\nconst {Criteria} = Shopware.Data;\n\n// Register the 'multisafepay-refund' component with Shopware\nComponent.register('multisafepay-refund', {\n    // Define the template for this component\n    template,\n\n    // Define the services that this component will use\n    inject: [\n        'repositoryFactory',\n        'orderService',\n        'stateStyleDataProviderService',\n        'multiSafepayApiService'\n    ],\n\n    // Define the mixins that this component will use\n    mixins: [\n        Mixin.getByName('notification')\n    ],\n\n    // Define the properties that this component will receive\n    props: {\n        orderId: {\n            type: String,\n            required: true\n        },\n    },\n\n    // Define the data that this component will manage\n    data() {\n        return {\n            amount: null,\n            isLoading: null,\n            versionContext: null,\n            order: null,\n            maxRefundableAmount: 0,\n            isRefundAllowed: true,\n            refundedAmount: 0,\n            showModal: false,\n            isRefundDisabled: false\n        };\n    },\n\n    // Define the watchers that this component will use\n    watch: {\n        orderId() {\n            this.createdComponent();\n        },\n        amount() {\n            this.amount = parseFloat(this.amount).toFixed(2);\n        },\n        refundedAmount() {\n            this.refundedAmount = parseFloat(this.refundedAmount).toFixed(2);\n        }\n    },\n\n    // Define the methods that this component will use\n    methods: {\n        // This method is used to close the refund modal\n        closeModal() {\n            this.showModal = false;\n        },\n        // This method is used to show the refund modal. It also validates the refund amount.\n        showRefundModal() {\n            if (this.amount < 0.01) {\n                this.createNotificationWarning({\n                    title: 'Invalid amount',\n                    message: 'Fill in a valid amount'\n                });\n                return;\n            }\n            this.showModal = true;\n        },\n        // This method is used to apply the refund. It calls the refund API and handles the response.\n        applyRefund() {\n            if (this.isLoading) {\n                return;\n            }\n\n            this.isLoading = true;\n            this.closeModal();\n\n            this.multiSafepayApiService.refund(this.amount, this.orderId)\n                .then((ApiResponse) => {\n                    if (ApiResponse.status === false) {\n                        this.createNotificationError({\n                            title: 'Failed to refund',\n                            message: ApiResponse.message\n                        });\n                        return;\n                    }\n\n                    this.createNotificationSuccess({\n                        title: 'Success',\n                        message: 'Successfully refunded'\n                    });\n\n                    this.reloadEntityData();\n                })\n                .catch((error) => {\n                    this.createNotificationError({\n                        title: 'Error',\n                        message: error.message || 'An unexpected error occurred during refund'\n                    });\n                })\n                .finally(() => {\n                    this.isLoading = false;\n                });\n        },\n        // This method is called when the component is created. It sets the version context and reloads the entity data.\n        createdComponent() {\n            this.versionContext = Shopware.Context.api;\n            this.reloadEntityData();\n        },\n        // This method is used to reload the entity data. It fetches the order data and refunds data from the API.\n        reloadEntityData() {\n            this.isLoading = true;\n            return this.orderRepository.get(this.orderId, this.versionContext, this.orderCriteria).then((response) => {\n                this.order = response;\n                this.multiSafepayApiService.getRefundData(this.order.id).then((data) => {\n                    this.isRefundAllowed = data.isAllowed;\n                    this.refundedAmount = data.refundedAmount;\n                    this.maxRefundableAmount = this.order.amountTotal - this.refundedAmount;\n                    this.isRefundDisabled = (this.order.amountTotal - this.refundedAmount === 0);\n                    this.isLoading = false;\n                }).catch(() => {\n                    this.isRefundAllowed = false;\n                })\n                return Promise.resolve();\n            }).catch(() => {\n                return Promise.reject();\n            });\n        },\n    },\n\n    // Define the computed properties that this component will use\n    computed: {\n        orderRepository() {\n            return this.repositoryFactory.create('order');\n        },\n        orderCriteria() {\n            const criteria = new Criteria(this.page, this.limit);\n\n            criteria\n                .addAssociation('currency')\n\n            return criteria;\n        },\n    },\n\n    // Define the lifecycle hooks that this component will use\n    created() {\n        this.createdComponent();\n    }\n});\n","<div>\n    <sw-button-process :isLoading=\"isLoading\" @click=\"check\">\n        {{ $t('multisafepay-verify-api-key.apiButton') }}\n    </sw-button-process>\n</div>\n","// Import the necessary modules from Shopware\nconst {Component, Mixin} = Shopware;\n\n// Import the template for this component\nimport template from './multisafepay-verify-api-key.html.twig';\n\n// Register the component with Shopware\nComponent.register('multisafepay-verify-api-key', {\n    // Specify the template to use for this component\n    template,\n\n    // Inject the multiSafepayApiService into this component\n    inject: [\n        'multiSafepayApiService'\n    ],\n\n    // Use the notification mixin\n    mixins: [\n        Mixin.getByName('notification')\n    ],\n\n    // Define the data for this component\n    data() {\n        return {\n            // Define a loading state\n            isLoading: false,\n\n            // Define the maximum number of attempts\n            maxAttempts: 10\n        };\n    },\n\n    // Define computed properties\n    computed: {\n        // Define a computed property for the global plugin configuration\n        globalPluginConfig() {\n            let configData;\n            let parent = this.$parent;\n\n            // Try to find the global plugin configuration in the parent components\n            for (let i = 0; i < this.maxAttempts; i++) {\n                if (parent && parent.actualConfigData) {\n                    configData = parent.actualConfigData.null;\n                    return configData;\n                }\n                parent = parent.$parent;\n            }\n            return null;\n        },\n\n        // Define a computed property for the actual plugin configuration\n        actualPluginConfig() {\n            let currentSalesChannelId;\n            let actualConfigData;\n            let parent = this.$parent;\n\n            // Try to find the actual plugin configuration in the parent components\n            for (let i = 0; i < this.maxAttempts; i++) {\n                if (parent && parent.currentSalesChannelId) {\n                    currentSalesChannelId = parent.currentSalesChannelId;\n                } else {\n                    return null;\n                }\n\n                if (parent && parent.actualConfigData && parent.actualConfigData[currentSalesChannelId]) {\n                    actualConfigData = parent.actualConfigData[currentSalesChannelId];\n                    return actualConfigData;\n                }\n                parent = parent.$parent;\n            }\n            return null;\n        }\n    },\n\n    // Define methods for this component\n    methods: {\n        // Define a method to check the API key\n        check() {\n            // Set the loading state to true\n            this.isLoading = true;\n\n            // Call the verifyApiKey method of the multiSafepayApiService\n            this.multiSafepayApiService.verifyApiKey(this.globalPluginConfig, this.actualPluginConfig).then((ApiResponse) => {\n                // If the API response is not successful, show a warning notification\n                if (ApiResponse.success === false) {\n                    this.createNotificationWarning({\n                        title: 'MultiSafepay',\n                        message: this.$t('multisafepay-verify-api-key.error')\n                    })\n                    // Set the loading state to false\n                    this.isLoading = false;\n                    return;\n                }\n                // If the API response is successful, show a success notification\n                this.createNotificationSuccess({\n                    title: 'MultiSafepay',\n                    message: this.$t('multisafepay-verify-api-key.success')\n                });\n                // Set the loading state to false\n                this.isLoading = false;\n            });\n        },\n    }\n});\n","<template>\n    <div class=\"multisafepay-support\">\n        <mt-container>\n            <h2 class=\"multisafepay-title\">{{ $t(\"msp-support.documentation\") }}</h2>\n            <p>{{ $t(\"msp-support.read_docs\") }}:</p>\n            <ul class=\"multisafepay-ul\">\n                <li>\n                    <a href=\"https://docs.multisafepay.com/docs/shopware#shopware-6\" target=\"_blank\" rel=\"noopener\">\n                        {{ $t('msp-support.manual') }}\n                    </a>\n                </li>\n                <li>\n                    <a href=\"https://github.com/MultiSafepay/shopware6/blob/master/CHANGELOG.md\"\n                    target=\"_blank\" rel=\"noopener\">\n                        {{ $t(\"msp-support.changelog\") }}\n                    </a>\n                </li>\n            </ul>\n            <p class=\"mt-1\">{{ $t(\"msp-support.for_developers\") }}:</p>\n            <ul class=\"multisafepay-ul\">\n                <li>\n                    <a href=\"https://docs.multisafepay.com/reference/introduction\" target=\"_blank\" rel=\"noopener\">\n                        {{ $t(\"msp-support.api_documentation\") }}\n                    </a>\n                </li>\n                <li>\n                    <a href=\"https://github.com/MultiSafepay/Shopware6\" target=\"_blank\" rel=\"noopener\">\n                        MultiSafepay GitHub\n                    </a>\n                </li>\n            </ul>\n            <h2 class=\"mt-2\">{{ $t(\"msp-support.account\")}}</h2>\n            <p>\n                {{ $t(\"msp-support.multisafepay_account_needed\") }}\n                <br/>\n                <span v-html='$t(\"msp-support.multisafepay_test_account\")'></span>\n            </p>\n            <p class=\"mt-2\">\n                <span v-html='$t(\"msp-support.multisafepay_live_account\")'></span>\n            </p>\n            <ul class=\"multisafepay-ul-none\">\n                <li>\n                    {{ $t(\"msp-support.telephone\") }}:\n                    <a href=\"tel:+31208500501\">\n                        +31 (0)20 - 8500501\n                    </a>\n                </li>\n                <li>\n                    {{ $t(\"msp-support.e-mail\") }}:\n                    <a href=\"mailto:sales@multisafepay.com\">\n                        sales@multisafepay.com\n                    </a>\n                </li>\n            </ul>\n            <h2 class=\"mt-2\">{{ $t(\"msp-support.contact\") }}</h2>\n            <p>\n                {{ $t(\"msp-support.multisafepay_assistance_integration_team\") }}\n            </p>\n            <ul class=\"multisafepay-ul-none\">\n                <li>\n                    {{ $t(\"msp-support.telephone\") }}:\n                    <a href=\"tel:+31208500500\">\n                        +31 (0)20 - 8500500\n                    </a>\n                </li>\n                <li>\n                    {{ $t(\"msp-support.e-mail\") }}:\n                    <a href=\"mailto:integration@multisafepay.com\">\n                        integration@multisafepay.com\n                    </a>\n                </li>\n            </ul>\n        </mt-container>\n    </div>\n</template>\n","// Import the Component object from Shopware\nconst {Component} = Shopware;\n\n// Import the SCSS file for this component\nimport './multisafepay-support.scss'\n\n// Import the Twig template for this component\nimport template from './multisafepay-support.html.twig';\n\n// Register the 'multisafepay-support' component with Shopware\nComponent.register('multisafepay-support', {\n    // Define the template for this component\n    template,\n    \n    // Add any data properties that might be needed\n    data() {\n        return {};\n    },\n    \n    // Add created lifecycle method to ensure the component is properly initialized\n    created() {\n        // Making sure the component is visible\n    },\n\n    // Add mounted lifecycle hook to ensure visibility\n    mounted() {\n        // Find the template parent and force display:block\n        const parentTemplate = this.$el.closest('template.sw-form-field-renderer');\n        if (parentTemplate) {\n            parentTemplate.style.display = 'block';\n        }\n        \n        // Also try to find any parent elements that might be hidden\n        let currentEl = this.$el;\n        while (currentEl) {\n            if (window.getComputedStyle(currentEl).display === 'none') {\n                currentEl.style.display = 'block';\n            }\n            currentEl = currentEl.parentElement;\n        }\n    }\n});\n","{% block sw_settings_payment_detail_content_field_after_order_enabled %}\n    {% parent %}\n    <mt-switch\n            v-if=\"tokenizationSupported\"\n            v-model=\"paymentMethod.customFields.tokenization\"\n            name=\"sw-field--paymentMethod-customFields.tokenization\"\n            class=\"sw-settings-payment-detail__field-custom-fields-tokenization\"\n            label=\"Tokenization\"\n            :help-text=\"$t('multisafepay-tokenization.help_text')\"\n    ></mt-switch>\n    <mt-switch\n            v-if=\"componentSupported\"\n            v-model=\"paymentMethod.customFields.component\"\n            name=\"sw-field--paymentMethod-customFields.component\"\n            class=\"sw-settings-payment-detail__field-custom-fields-component\"\n            label=\"Component\"\n            :help-text=\"$t('multisafepay-component.help_text')\"\n    ></mt-switch>\n    <mt-switch\n            v-if=\"paymentMethod.name.toLowerCase().includes('mybank')\"\n            v-model=\"paymentMethod.customFields.direct\"\n            name=\"sw-field--paymentMethod-customFields.direct\"\n            class=\"sw-settings-payment-detail__field-custom-fields-direct\"\n            label=\"Pay inside checkout\"\n            :help-text=\"$t('multisafepay-direct.help_text')\"\n    ></mt-switch>\n{% endblock %}\n","// Import the template from the specified file\nimport template from './sw-settings-payment-detail.html.twig'\n// Import the 'Component' from the Shopware library\nconst { Component } = Shopware;\n\n// Override the 'sw-settings-payment-detail' component\nComponent.override('sw-settings-payment-detail', {\n    // Use the imported template\n    template,\n\n    // Define the data for this component\n    data() {\n        return {\n            // Define whether tokenization is supported\n            tokenizationSupported: false,\n\n            // Define whether the component is supported\n            componentSupported: false\n        }\n    },\n\n    // Inject the 'multiSafepayApiService' into this component\n    inject: [\n        'multiSafepayApiService'\n    ],\n\n    // Watch for changes in the 'paymentMethod' data property\n    watch: {\n        paymentMethod(){\n            // Initialize the 'paymentMethod' data property if it's not defined\n            if (!this.paymentMethod) {\n                this.paymentMethod = {};\n            }\n\n            // Initialize the 'id' property of 'paymentMethod' if it's not defined\n            if (!this.paymentMethod.id) {\n                this.paymentMethod.id = null;\n            }\n\n            // Initialize the 'customFields' property of 'paymentMethod' if it's not defined\n            if (!this.paymentMethod.customFields) {\n                this.paymentMethod.customFields = {};\n            }\n\n            // Initialize the 'tokenization' property of 'customFields' if it's not defined\n            if (!this.paymentMethod.customFields.tokenization) {\n                this.paymentMethod.customFields.tokenization = false;\n            }\n\n            // Initialize the 'component' property of 'customFields' if it's not defined\n            if (!this.paymentMethod.customFields.component) {\n                this.paymentMethod.customFields.component = false;\n            }\n\n            // Initialize the 'direct' property of 'customFields' if it's not defined\n            if (!this.paymentMethod.customFields.direct) {\n                this.paymentMethod.customFields.direct = false;\n            }\n\n            this.reloadEntityData()\n        }\n    },\n\n    // Lifecycle hook that is called when the component is mounted\n    mounted() {\n        this.reloadEntityData();\n    },\n\n    // Define the methods for this component\n    methods: {\n        // Method to reload the entity data\n        reloadEntityData(){\n            // Call the 'isTokenizationAllowed' method of 'multiSafepayApiService'\n            this.multiSafepayApiService.isTokenizationAllowed(this.$route.params.id).then((ApiResponse) => {\n                // Set the 'tokenizationSupported' data property based on the API response\n                this.tokenizationSupported = ApiResponse.supported\n            });\n\n            // Call the 'isComponentAllowed' method of 'multiSafepayApiService'\n            this.multiSafepayApiService.isComponentAllowed(this.$route.params.id).then((ApiResponse) => {\n                // Set the 'componentSupported' data property based on the API response\n                this.componentSupported = ApiResponse.supported\n            });\n        },\n    }\n});\n","{% block sw_order_detail_general_line_items_card %}\n    {% parent %}\n    <multisafepay-refund :orderId=\"orderId\"></multisafepay-refund>\n{% endblock %}\n","// Import the template from the specified file\nimport template from './sw-order-detail-general.html.twig';\n\n// In this case, we are overriding the 'sw-order-detail-general' component\nShopware.Component.override('sw-order-detail-general', {\n    // Assign the imported template to the template property of the component\n    // This will replace the default template of the component with our custom one\n    template\n});\n","{% block sw_order_detail_base_line_items_card %}\n    {% parent %}\n    <multisafepay-refund :orderId=\"orderId\"></multisafepay-refund>\n{% endblock %}\n","// Import the template from the specified file\nimport template from './sw-order-detail.html.twig';\n\n// In this case, we are overriding the 'sw-order-detail-base' component\nShopware.Component.override('sw-order-detail-base', {\n    // Assign the imported template to the template property of the component\n    // This will replace the default template of the component with our custom one\n    template\n});\n","// Define the API service class\nconst ApiService = Shopware.Classes.ApiService;\n\n// Define a new class that extends ApiService\nexport default class MultiSafepayApiService extends ApiService {\n    // Constructor for the class\n    constructor(httpClient, loginService, apiEndpoint = 'multisafepay')\n    {\n        // Call the parent class constructor\n        super(httpClient, loginService, apiEndpoint);\n    }\n\n    // Method to refund a certain amount for a specific order\n    refund(amount, orderId)\n    {\n        // Define the API route for refund\n        const apiRoute = `${this.getApiBasePath()}/refund`;\n\n        // Make a POST request to the refund API route\n        return this.httpClient.post(\n            apiRoute,\n            {\n                amount: amount * 100, // Convert the amount to cents\n                orderId: orderId // The ID of the order to refund\n            },\n            {\n                headers: this.getBasicHeaders() // Get the basic headers for the request\n            }\n        ).then((response) => {\n            return ApiService.handleResponse(response); // Handle the response from the API\n        }).catch((response) => {\n            return ApiService.handleResponse(response); // Handle the error response from the API\n        });\n    }\n\n    // Method to get refund data for a specific order\n    getRefundData(orderId)\n    {\n        // Define the API route for getting refund data\n        const apiRoute = `${this.getApiBasePath()}/get-refund-data`;\n\n        // Make a POST request to the get refund data API route\n        return this.httpClient.post(\n            apiRoute,\n            {\n                orderId: orderId // The ID of the order to get refund data for\n            },\n            {\n                headers: this.getBasicHeaders() // Get the basic headers for the request\n            }\n        ).then((response) => {\n            return ApiService.handleResponse(response); // Handle the response from the API\n        });\n    }\n\n    // Method to verify the API key\n    verifyApiKey(globalPluginConfig, actualPluginConfig)\n    {\n        // Define the API route for verifying the API key\n        const apiRoute = `${this.getApiBasePath()}/verify-api-key`;\n        const headers = this.getBasicHeaders(); // Get the basic headers for the request\n\n        // Make a POST request to the verify API key API route\n        return this.httpClient.post(\n            apiRoute,\n            {\n                globalPluginConfig: globalPluginConfig, // The global plugin configuration\n                actualPluginConfig: actualPluginConfig // The actual plugin configuration\n            },\n            {\n                headers\n            }\n        ).then((response) => {\n            return ApiService.handleResponse(response); // Handle the response from the API\n        });\n    }\n\n    // Method to check if tokenization is allowed for a specific payment method\n    isTokenizationAllowed(paymentMethodId)\n    {\n        // Define the API route for checking if tokenization is allowed\n        const apiRoute = `${this.getApiBasePath()}/tokenization-allowed`;\n\n        // Make a POST request to the tokenization allowed API route\n        return this.httpClient.post(\n            apiRoute,\n            {\n                paymentMethodId: paymentMethodId // The ID of the payment method to check\n            },\n            {\n                headers: this.getBasicHeaders() // Get the basic headers for the request\n            }\n        ).then((response) => {\n            return ApiService.handleResponse(response); // Handle the response from the API\n        }).catch((response) => {\n            return ApiService.handleResponse(response); // Handle the error response from the API\n        });\n    }\n\n    // Method to check if a component is allowed for a specific payment method\n    isComponentAllowed(paymentMethodId)\n    {\n        // Define the API route for checking if a component is allowed\n        const apiRoute = `${this.getApiBasePath()}/component-allowed`;\n\n        // Make a POST request to the component allowed API route\n        return this.httpClient.post(\n            apiRoute,\n            {\n                paymentMethodId: paymentMethodId // The ID of the payment method to check\n            },\n            {\n                headers: this.getBasicHeaders() // Get the basic headers for the request\n            }\n        ).then((response) => {\n            return ApiService.handleResponse(response); // Handle the response from the API\n        }).catch((response) => {\n            return ApiService.handleResponse(response); // Handle the error response from the API\n        });\n    }\n}\n","import './components/multisafepay-refund';\nimport './components/multisafepay-verify-api-key';\nimport './components/multisafepay-support';\nimport './paymentMethodSettings'\nimport './override/sw-order-detail-general';\nimport './override/sw-order-detail'\nimport MultiSafepayApiService from './service/MultiSafepayApi.service';\nimport localeDE from './snippets/de_DE.json';\nimport localeEN from './snippets/en_GB.json';\nimport localeNL from './snippets/nl_NL.json';\n\nconst { Application } = Shopware;\n\nApplication.addServiceProvider('multiSafepayApiService', (container) => {\n    const initContainer = Application.getContainer('init');\n    return new MultiSafepayApiService(initContainer.httpClient, container.loginService);\n});\n\nShopware.Locale.extend('de-DE', localeDE);\nShopware.Locale.extend('en-GB', localeEN);\nShopware.Locale.extend('nl-NL', localeNL);\n"],"names":["template$5","Component","Mixin","Criteria","template","ApiResponse","error","response","data","criteria","template$4","configData","parent","i","currentSalesChannelId","actualConfigData","template$3","parentTemplate","currentEl","template$2","template$1","ApiService","MultiSafepayApiService","httpClient","loginService","apiEndpoint","amount","orderId","apiRoute","globalPluginConfig","actualPluginConfig","headers","paymentMethodId","Application","container","initContainer","localeDE","localeEN","localeNL"],"mappings":"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"}